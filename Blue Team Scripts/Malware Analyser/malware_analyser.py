import argparse
import os
import shutil
import subprocess
from time import sleep

def prepare_environment(sample_path):
    sandbox_dir = os.path.abspath("SandboxFiles")
    os.makedirs(sandbox_dir, exist_ok=True)

    # Copy malware sample
    shutil.copy(sample_path, sandbox_dir)

    # Copy Sysmon + config
    for file in ["Sysmon64.exe", "Sysmon64.sys", "sysmon_config.xml"]:
        shutil.copy(file, sandbox_dir)

    # Copy Procmon
    for file in ["Procmon.exe"]:
        shutil.copy(file, sandbox_dir)

    # PowerShell script for inside sandbox
    powershell_script = r"""Start-Process -FilePath .\Sysmon64.exe -ArgumentList "-accepteula -i sysmon_config.xml" -WindowStyle Hidden
Start-Process -FilePath .\Procmon.exe -ArgumentList "/Minimized /Quiet /Backingfile procmon.pml" -WindowStyle Hidden

Start-Sleep -Seconds 5
Start-Process -FilePath .\{sample_name} -WindowStyle Hidden
Start-Sleep -Seconds 30

# Stop Procmon logging
Stop-Process -Name Procmon
Start-Sleep -Seconds 2

# Export PML to CSV
.\Procmon.exe /OpenLog procmon.pml /SaveAs procmon.csv

# Stop Sysmon cleanly
Stop-Process -Name Sysmon64

# Collect other basic artifacts
Get-Process | Out-File -FilePath processlist.txt
Get-NetTCPConnection | Out-File -FilePath netstat.txt
Write-Output "[+] Completed analysis run." | Out-File -FilePath status.txt
"""

    sample_name = os.path.basename(sample_path)
    powershell_script = powershell_script.replace("{sample_name}", sample_name)

    with open(os.path.join(sandbox_dir, "analyze.ps1"), "w") as f:
        f.write(powershell_script)

    return sandbox_dir, "analyze.ps1"

def write_wsb_file(shared_dir, script_name):
    config = f"""<Configuration>
  <MappedFolders>
    <MappedFolder>
      <HostFolder>{shared_dir}</HostFolder>
      <ReadOnly>false</ReadOnly>
    </MappedFolder>
  </MappedFolders>
  <LogonCommand>
    <Command>powershell -ExecutionPolicy Bypass -File {script_name}</Command>
  </LogonCommand>
</Configuration>"""

    with open("analysis.wsb", "w") as f:
        f.write(config)

def launch_sandbox():
    subprocess.run(["WindowsSandbox.exe", "analysis.wsb"], check=True)

def summarize_logs(shared_dir):
    procmon_csv = os.path.join(shared_dir, "procmon.csv")
    sysmon_log = os.path.join(shared_dir, "Sysmon.log")
    status = os.path.join(shared_dir, "status.txt")

    print("\n=== Malware Analysis Summary ===")
    if os.path.exists(procmon_csv):
        print("[+] Procmon log captured.")
    if os.path.exists(sysmon_log):
        print("[+] Sysmon log present (eventlog format).")
    if os.path.exists(status):
        print("[+] Analysis completed inside sandbox.")

    suspicious_hits = 0
    if os.path.exists(procmon_csv):
        with open(procmon_csv, errors='ignore') as f:
            for line in f:
                if any(k in line.lower() for k in ["regsvr32", "powershell", "cmd.exe", "wscript", "schtasks"]):
                    suspicious_hits += 1
        print(f"[!] Suspicious operations in Procmon log: {suspicious_hits}")
    else:
        print("[-] Procmon CSV not found.")

    print("================================")

def main():
    parser = argparse.ArgumentParser(description="Run a file in Windows Sandbox and perform analysis with Sysmon + Procmon.")
    parser.add_argument("filename", help="Malware file to analyze")
    args = parser.parse_args()

    sample_path = os.path.abspath(args.filename)
    if not os.path.exists(sample_path):
        print("[-] File not found.")
        return

    print("[*] Preparing sandbox environment...")
    sandbox_dir, ps1_script = prepare_environment(sample_path)
    write_wsb_file(sandbox_dir, ps1_script)

    print("[*] Launching Windows Sandbox...")
    launch_sandbox()

    input("[*] Press Enter once the Sandbox has finished and closed...")

    summarize_logs(sandbox_dir)

if __name__ == "__main__":
    main()
